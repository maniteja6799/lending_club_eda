[
  {
    "objectID": "Pawan_Mani_Teja_Kuppili.html",
    "href": "Pawan_Mani_Teja_Kuppili.html",
    "title": "EDA on Lending Club dataset",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport matplotlib.pyplot as plt\nimport re\nimport seaborn as sns\npd.options.display.max_colwidth = 200"
  },
  {
    "objectID": "Pawan_Mani_Teja_Kuppili.html#load-data",
    "href": "Pawan_Mani_Teja_Kuppili.html#load-data",
    "title": "EDA on Lending Club dataset",
    "section": "Load Data",
    "text": "Load Data\n\nloan_data_df = pd.read_csv('loan.csv', low_memory=False)\ncolumn_desc_df = pd.read_excel('Data_Dictionary.xlsx')\nloan_data_df.info()\nbefore_cols = len(loan_data_df.columns)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 39717 entries, 0 to 39716\nColumns: 111 entries, id to total_il_high_credit_limit\ndtypes: float64(74), int64(13), object(24)\nmemory usage: 33.6+ MB"
  },
  {
    "objectID": "Pawan_Mani_Teja_Kuppili.html#data-cleanup",
    "href": "Pawan_Mani_Teja_Kuppili.html#data-cleanup",
    "title": "EDA on Lending Club dataset",
    "section": "Data Cleanup",
    "text": "Data Cleanup\n\nFinding Columns having all Null or 90% Null data\n#### All Columns having 90% or more Null data\nNote: Following list will be the superset of previous list.\n\natleast_90pct_empty = loan_data_df.columns[~(loan_data_df.isnull().sum(axis=0) &lt;= loan_data_df.shape[0] * 0.9)].tolist()\nprint(f\"Columns with atleast 90% of empty columns are : {len(atleast_90pct_empty)}\\n\")\nprint(atleast_90pct_empty)\n\nColumns with atleast 90% of empty columns are : 56\n\n['mths_since_last_record', 'next_pymnt_d', 'mths_since_last_major_derog', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_il_6m', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc', 'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m', 'acc_open_past_24mths', 'avg_cur_bal', 'bc_open_to_buy', 'bc_util', 'mo_sin_old_il_acct', 'mo_sin_old_rev_tl_op', 'mo_sin_rcnt_rev_tl_op', 'mo_sin_rcnt_tl', 'mort_acc', 'mths_since_recent_bc', 'mths_since_recent_bc_dlq', 'mths_since_recent_inq', 'mths_since_recent_revol_delinq', 'num_accts_ever_120_pd', 'num_actv_bc_tl', 'num_actv_rev_tl', 'num_bc_sats', 'num_bc_tl', 'num_il_tl', 'num_op_rev_tl', 'num_rev_accts', 'num_rev_tl_bal_gt_0', 'num_sats', 'num_tl_120dpd_2m', 'num_tl_30dpd', 'num_tl_90g_dpd_24m', 'num_tl_op_past_12m', 'pct_tl_nvr_dlq', 'percent_bc_gt_75', 'tot_hi_cred_lim', 'total_bal_ex_mort', 'total_bc_limit', 'total_il_high_credit_limit']\n\n\n\nColumns having all Null\n\nall_empty_cols= loan_data_df.columns[loan_data_df.isna().all()].tolist()\nprint(f\"Total number of all empty columns are : {len(all_empty_cols)}\\n\")\nprint(all_empty_cols)\n\nTotal number of all empty columns are : 54\n\n['mths_since_last_major_derog', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_il_6m', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc', 'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m', 'acc_open_past_24mths', 'avg_cur_bal', 'bc_open_to_buy', 'bc_util', 'mo_sin_old_il_acct', 'mo_sin_old_rev_tl_op', 'mo_sin_rcnt_rev_tl_op', 'mo_sin_rcnt_tl', 'mort_acc', 'mths_since_recent_bc', 'mths_since_recent_bc_dlq', 'mths_since_recent_inq', 'mths_since_recent_revol_delinq', 'num_accts_ever_120_pd', 'num_actv_bc_tl', 'num_actv_rev_tl', 'num_bc_sats', 'num_bc_tl', 'num_il_tl', 'num_op_rev_tl', 'num_rev_accts', 'num_rev_tl_bal_gt_0', 'num_sats', 'num_tl_120dpd_2m', 'num_tl_30dpd', 'num_tl_90g_dpd_24m', 'num_tl_op_past_12m', 'pct_tl_nvr_dlq', 'percent_bc_gt_75', 'tot_hi_cred_lim', 'total_bal_ex_mort', 'total_bc_limit', 'total_il_high_credit_limit']\n\n\n\n\nDelete all or 90% empty columns\n\n# Remove all columns with null values\nloan_data_df = loan_data_df.dropna(axis=1, how='all')\n# Remove all columns with 90% null values\nloan_data_df = loan_data_df.loc[:, (loan_data_df.isnull().sum(axis=0) &lt;= loan_data_df.shape[0] * 0.9)]\n\n\n\n\nRemove columns which have constant as a value.\nThese will become metadata for the dataset because the dataset has only one value for them. eg. all values in column: pymnt_plan are n.\n\nconstant_cols_dict = { c : loan_data_df[c].value_counts().index[0] for c in loan_data_df.columns if loan_data_df[c].value_counts().count() == 1} \n\nprint(f\"Columns having constant values: {constant_cols_dict}\\n\")\n\nprint(f\"Columns to be removed : {constant_cols_dict.keys()}\\n\")\n\nloan_data_df.drop(columns=constant_cols_dict.keys(), inplace=True) \n\nColumns having constant values: {'pymnt_plan': 'n', 'initial_list_status': 'f', 'collections_12_mths_ex_med': 0.0, 'policy_code': 1, 'application_type': 'INDIVIDUAL', 'acc_now_delinq': 0, 'chargeoff_within_12_mths': 0.0, 'delinq_amnt': 0, 'tax_liens': 0.0}\n\nColumns to be removed : dict_keys(['pymnt_plan', 'initial_list_status', 'collections_12_mths_ex_med', 'policy_code', 'application_type', 'acc_now_delinq', 'chargeoff_within_12_mths', 'delinq_amnt', 'tax_liens'])\n\n\n\n\n\nInspect and remove unwanted columns\nSome columns can be removed since they don’t give much use to the analysis\n\nprint(\"desc, purpose, title are similar - title and desc seem to be human added and have more distinct values. Purpose has a finite list and it alone can be looked at and drop desc and title.\")\nprint(\"\\n-------title-----------\\n\", loan_data_df.title.value_counts().index, \n      # \"\\n-------desc----------\\n\", loan_data_df.desc.value_counts().index, # Too much data. skipping print\n      \"\\n-------purpose-----------\\n\", loan_data_df.purpose.value_counts().index)\ncols_to_drop = ['title', 'desc']\nprint(\"url column has external url for lending club, and not much use to analysys\")\nprint(loan_data_df.url.head())\ncols_to_drop.append('url')\nloan_data_df.drop(columns=cols_to_drop, inplace=True) \n\ndesc, purpose, title are similar - title and desc seem to be human added and have more distinct values. Purpose has a finite list and it alone can be looked at and drop desc and title.\n\n-------title-----------\n Index(['Debt Consolidation', 'Debt Consolidation Loan', 'Personal Loan',\n       'Consolidation', 'debt consolidation', 'Home Improvement',\n       'Credit Card Consolidation', 'Debt consolidation',\n       'Small Business Loan', 'Credit Card Loan',\n       ...\n       'Stav', 'Florida Vacation 2011', 'Ninja zx6', 'Pay off Masters Degree',\n       'CREDIT CARD CONSOLIDATION LOAN 01', 'your rate is better than my rate',\n       'Concession Trailer', 'gregs', 'EZover', 'JAL Loan'],\n      dtype='object', length=19615) \n-------purpose-----------\n Index(['debt_consolidation', 'credit_card', 'other', 'home_improvement',\n       'major_purchase', 'small_business', 'car', 'wedding', 'medical',\n       'moving', 'vacation', 'house', 'educational', 'renewable_energy'],\n      dtype='object')\nurl column has external url for lending club, and not much use to analysys\n0    https://lendingclub.com/browse/loanDetail.action?loan_id=1077501\n1    https://lendingclub.com/browse/loanDetail.action?loan_id=1077430\n2    https://lendingclub.com/browse/loanDetail.action?loan_id=1077175\n3    https://lendingclub.com/browse/loanDetail.action?loan_id=1076863\n4    https://lendingclub.com/browse/loanDetail.action?loan_id=1075358\nName: url, dtype: object\n\n\n\nDataset after removed columns\n\nprint(f\"The no. columns are reduced from {before_cols} to {len(loan_data_df.columns)}\")\n\nThe no. columns are reduced from 111 to 43\n\n\n\nloan_data_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 39717 entries, 0 to 39716\nData columns (total 43 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   id                       39717 non-null  int64  \n 1   member_id                39717 non-null  int64  \n 2   loan_amnt                39717 non-null  int64  \n 3   funded_amnt              39717 non-null  int64  \n 4   funded_amnt_inv          39717 non-null  float64\n 5   term                     39717 non-null  object \n 6   int_rate                 39717 non-null  object \n 7   installment              39717 non-null  float64\n 8   grade                    39717 non-null  object \n 9   sub_grade                39717 non-null  object \n 10  emp_title                37258 non-null  object \n 11  emp_length               38642 non-null  object \n 12  home_ownership           39717 non-null  object \n 13  annual_inc               39717 non-null  float64\n 14  verification_status      39717 non-null  object \n 15  issue_d                  39717 non-null  object \n 16  loan_status              39717 non-null  object \n 17  purpose                  39717 non-null  object \n 18  zip_code                 39717 non-null  object \n 19  addr_state               39717 non-null  object \n 20  dti                      39717 non-null  float64\n 21  delinq_2yrs              39717 non-null  int64  \n 22  earliest_cr_line         39717 non-null  object \n 23  inq_last_6mths           39717 non-null  int64  \n 24  mths_since_last_delinq   14035 non-null  float64\n 25  open_acc                 39717 non-null  int64  \n 26  pub_rec                  39717 non-null  int64  \n 27  revol_bal                39717 non-null  int64  \n 28  revol_util               39667 non-null  object \n 29  total_acc                39717 non-null  int64  \n 30  out_prncp                39717 non-null  float64\n 31  out_prncp_inv            39717 non-null  float64\n 32  total_pymnt              39717 non-null  float64\n 33  total_pymnt_inv          39717 non-null  float64\n 34  total_rec_prncp          39717 non-null  float64\n 35  total_rec_int            39717 non-null  float64\n 36  total_rec_late_fee       39717 non-null  float64\n 37  recoveries               39717 non-null  float64\n 38  collection_recovery_fee  39717 non-null  float64\n 39  last_pymnt_d             39646 non-null  object \n 40  last_pymnt_amnt          39717 non-null  float64\n 41  last_credit_pull_d       39715 non-null  object \n 42  pub_rec_bankruptcies     39020 non-null  float64\ndtypes: float64(16), int64(10), object(17)\nmemory usage: 13.0+ MB\n\n\n\nloan_data_df.head(5)\n\n\n\n\n\n\n\n\nid\nmember_id\nloan_amnt\nfunded_amnt\nfunded_amnt_inv\nterm\nint_rate\ninstallment\ngrade\nsub_grade\n...\ntotal_pymnt_inv\ntotal_rec_prncp\ntotal_rec_int\ntotal_rec_late_fee\nrecoveries\ncollection_recovery_fee\nlast_pymnt_d\nlast_pymnt_amnt\nlast_credit_pull_d\npub_rec_bankruptcies\n\n\n\n\n0\n1077501\n1296599\n5000\n5000\n4975.0\n36 months\n10.65%\n162.87\nB\nB2\n...\n5833.84\n5000.00\n863.16\n0.00\n0.00\n0.00\nJan-15\n171.62\nMay-16\n0.0\n\n\n1\n1077430\n1314167\n2500\n2500\n2500.0\n60 months\n15.27%\n59.83\nC\nC4\n...\n1008.71\n456.46\n435.17\n0.00\n117.08\n1.11\nApr-13\n119.66\nSep-13\n0.0\n\n\n2\n1077175\n1313524\n2400\n2400\n2400.0\n36 months\n15.96%\n84.33\nC\nC5\n...\n3005.67\n2400.00\n605.67\n0.00\n0.00\n0.00\nJun-14\n649.91\nMay-16\n0.0\n\n\n3\n1076863\n1277178\n10000\n10000\n10000.0\n36 months\n13.49%\n339.31\nC\nC1\n...\n12231.89\n10000.00\n2214.92\n16.97\n0.00\n0.00\nJan-15\n357.48\nApr-16\n0.0\n\n\n4\n1075358\n1311748\n3000\n3000\n3000.0\n60 months\n12.69%\n67.79\nB\nB5\n...\n3513.33\n2475.94\n1037.39\n0.00\n0.00\n0.00\nMay-16\n67.79\nMay-16\n0.0\n\n\n\n\n5 rows × 43 columns\n\n\n\n\n\n\nConvert the columns to correct datatypes\n\nfrom datetime import date, datetime\ndef convert_emp_length(l):\n    if pd.isna(l):\n        return np.nan\n    elif l == '&lt; 1 year':\n        return 0\n    elif l == '10+ years':\n        return 10\n    else:\n        return int(str(l)[0])\n\ndef convert_period_to_date(p):\n    if type(p) == datetime:\n        return p\n    period_parts = p.split('-')\n    return datetime( int(f\"19{period_parts[1]}\" if int(period_parts[1]) &gt; 30 else f\"20{period_parts[1]}\") ,  datetime.strptime(period_parts[0],'%b').month, 1) \n\n\n# numbers\nloan_data_df.term               = loan_data_df.term.apply(lambda x: int(str(x)[:3]))\nloan_data_df.emp_length         = loan_data_df.emp_length.apply(convert_emp_length) \n# percentages\nloan_data_df.int_rate           = loan_data_df.int_rate.apply(lambda x: float(str(x)[:-1])/100)\nloan_data_df.revol_util         = loan_data_df.revol_util.apply(lambda x: (float(str(x)[:-1])/100) if str(x) != 'nan' else x)\n# dates\nloan_data_df.issue_d            = pd.to_datetime(loan_data_df.issue_d, format='%b-%y')\nloan_data_df.last_pymnt_d       = pd.to_datetime(loan_data_df.last_pymnt_d, format='%b-%y')\nloan_data_df.last_credit_pull_d = pd.to_datetime(loan_data_df.last_credit_pull_d, format='%b-%y')\n# only years 69-99 will be added with 20th century(19xx) padding in python\n# ref: https://docs.python.org/3/library/time.html#:~:text=values%2069%E2%80%9399%20are%20mapped%20to%201969%E2%80%931999%2C%20and%20values%200%E2%80%9368%20are%20mapped%20to%202000%E2%80%932068.\nloan_data_df.earliest_cr_line   = loan_data_df.earliest_cr_line.apply(convert_period_to_date) \n\n\n\nRemove/add value to rows with null values in certain columns\n\nloan_data_df.isna().sum()[loan_data_df.isna().sum() &gt; 0]\n\nemp_title                  2459\nemp_length                 1075\nmths_since_last_delinq    25682\nrevol_util                   50\nlast_pymnt_d                 71\nlast_credit_pull_d            2\npub_rec_bankruptcies        697\ndtype: int64\n\n\nRemove rows with very few (&lt;100) NaNs\n\ncols_with_few_nan_rows = list(loan_data_df.isna().sum()[(loan_data_df.isna().sum() &lt; 700) & (loan_data_df.isna().sum() &gt; 0)].index)\nfor col in cols_with_few_nan_rows:\n    loan_data_df.drop(loan_data_df[loan_data_df[col].isna()].index, inplace=True)\n\nThe borrowers who have not been delinquated forever, we are setting higher value than the max avialable in dataset.\n\nloan_data_df.mths_since_last_delinq.fillna(value=1000, inplace=True)\nloan_data_df.mths_since_last_delinq.value_counts()\n\n1000.0    25594\n30.0        245\n15.0        241\n23.0        241\n24.0        235\n          ...  \n89.0          1\n107.0         1\n85.0          1\n97.0          1\n95.0          1\nName: mths_since_last_delinq, Length: 96, dtype: int64\n\n\nThe borrowers who do not have employment length are missing values. We are deleting those rows.\n\nloan_data_df.drop(loan_data_df[loan_data_df['emp_length'].isna()].index, inplace=True)\n\n\nprint(\"Columns with non-zero NaN values left:\")\nloan_data_df.isna().sum()[loan_data_df.isna().sum() &gt; 0]\n\nColumns with non-zero NaN values left:\n\n\nemp_title    1393\ndtype: int64"
  },
  {
    "objectID": "Pawan_Mani_Teja_Kuppili.html#derived-metrics",
    "href": "Pawan_Mani_Teja_Kuppili.html#derived-metrics",
    "title": "EDA on Lending Club dataset",
    "section": "Derived Metrics",
    "text": "Derived Metrics\n\n# Ratio of installment to monthly income\nloan_data_df['installment_to_month_inc'] = pd.cut(loan_data_df['installment'] / (loan_data_df['annual_inc']/12), bins=np.linspace(0,0.3,15)) \n# Ratio of open acc to total acc\nloan_data_df['open_to_total_acc'] = pd.cut(loan_data_df['open_acc'] / loan_data_df['total_acc'], bins=np.linspace(0,1,11))\n# Representing loan_status as a numeric value\nloan_data_df['loan_status_n'] = loan_data_df['loan_status'].map({'Charged Off': -1, 'Fully Paid': 1, 'Current': 0})\n\n### Categorising Annual income, loan_amount, interest_rate\n\nloan_data_df['annual_inc_range'] = pd.cut(loan_data_df.annual_inc, \n                                          bins=[1000, 10000, 50000, 100000, 500000, 1000000, 10000000], \n                                          labels=['below 10k','10k-50k','50k-100k','100k-500k', '500k-1M', '1M+'])\nloan_data_df['loan_amnt_range']  = pd.cut(loan_data_df.loan_amnt, \n                                          bins=[100, 1000, 5000, 10000, 25000, 50000], \n                                          labels=['below 1k','1k-5k','5k-10k','10k-25k', '25k+'])\nloan_data_df['int_rate_range']   = pd.cut(loan_data_df.int_rate, \n                                          bins=[0, 0.07, 0.14, 0.21, 0.3], \n                                          labels=['below 7%','7-14%','14-21%','21+%'])\n\n\nFinal Data Dictionary\n\ncolumn_desc_df = column_desc_df[column_desc_df.LoanStatNew.isin(loan_data_df.columns)]\ncolumn_desc_df.reset_index(inplace=True)\n\n\ncolumn_desc_df.loc[:, ['LoanStatNew', 'Description']]\n\n\n\n\n\n\n\n\nLoanStatNew\nDescription\n\n\n\n\n0\naddr_state\nThe state provided by the borrower in the loan application\n\n\n1\nannual_inc\nThe self-reported annual income provided by the borrower during registration.\n\n\n2\ncollection_recovery_fee\npost charge off collection fee\n\n\n3\ndelinq_2yrs\nThe number of 30+ days past-due incidences of delinquency in the borrower's credit file for the past 2 years\n\n\n4\ndti\nA ratio calculated using the borrower’s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower’s self-reported monthly inc...\n\n\n5\nearliest_cr_line\nThe month the borrower's earliest reported credit line was opened\n\n\n6\nemp_length\nEmployment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.\n\n\n7\nemp_title\nThe job title supplied by the Borrower when applying for the loan.*\n\n\n8\nfunded_amnt\nThe total amount committed to that loan at that point in time.\n\n\n9\nfunded_amnt_inv\nThe total amount committed by investors for that loan at that point in time.\n\n\n10\ngrade\nLC assigned loan grade\n\n\n11\nhome_ownership\nThe home ownership status provided by the borrower during registration. Our values are: RENT, OWN, MORTGAGE, OTHER.\n\n\n12\nid\nA unique LC assigned ID for the loan listing.\n\n\n13\ninq_last_6mths\nThe number of inquiries in past 6 months (excluding auto and mortgage inquiries)\n\n\n14\ninstallment\nThe monthly payment owed by the borrower if the loan originates.\n\n\n15\nint_rate\nInterest Rate on the loan\n\n\n16\nissue_d\nThe month which the loan was funded\n\n\n17\nlast_credit_pull_d\nThe most recent month LC pulled credit for this loan\n\n\n18\nlast_pymnt_amnt\nLast total payment amount received\n\n\n19\nlast_pymnt_d\nLast month payment was received\n\n\n20\nloan_amnt\nThe listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.\n\n\n21\nloan_status\nCurrent status of the loan\n\n\n22\nmember_id\nA unique LC assigned Id for the borrower member.\n\n\n23\nmths_since_last_delinq\nThe number of months since the borrower's last delinquency.\n\n\n24\nopen_acc\nThe number of open credit lines in the borrower's credit file.\n\n\n25\nout_prncp\nRemaining outstanding principal for total amount funded\n\n\n26\nout_prncp_inv\nRemaining outstanding principal for portion of total amount funded by investors\n\n\n27\npub_rec\nNumber of derogatory public records\n\n\n28\npub_rec_bankruptcies\nNumber of public record bankruptcies\n\n\n29\npurpose\nA category provided by the borrower for the loan request.\n\n\n30\nrecoveries\npost charge off gross recovery\n\n\n31\nrevol_bal\nTotal credit revolving balance\n\n\n32\nrevol_util\nRevolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.\n\n\n33\nsub_grade\nLC assigned loan subgrade\n\n\n34\nterm\nThe number of payments on the loan. Values are in months and can be either 36 or 60.\n\n\n35\ntotal_acc\nThe total number of credit lines currently in the borrower's credit file\n\n\n36\ntotal_pymnt\nPayments received to date for total amount funded\n\n\n37\ntotal_pymnt_inv\nPayments received to date for portion of total amount funded by investors\n\n\n38\ntotal_rec_int\nInterest received to date\n\n\n39\ntotal_rec_late_fee\nLate fees received to date\n\n\n40\ntotal_rec_prncp\nPrincipal received to date\n\n\n41\nverification_status\nIndicates if income was verified by LC, not verified, or if the income source was verified\n\n\n42\nzip_code\nThe first 3 numbers of the zip code provided by the borrower in the loan application."
  },
  {
    "objectID": "Pawan_Mani_Teja_Kuppili.html#find-and-remove-outliers",
    "href": "Pawan_Mani_Teja_Kuppili.html#find-and-remove-outliers",
    "title": "EDA on Lending Club dataset",
    "section": "Find and remove outliers",
    "text": "Find and remove outliers\n\nplt.subplot(2, 2, 1)\nplt.subplot(2, 2, 1).set_title('Annual income')\nplt.boxplot(loan_data_df.annual_inc)\n\nplt.subplot(2, 2, 2)\nplt.subplot(2, 2, 2).set_title('Annual income &lt; 98%ile')\nplt.boxplot(loan_data_df.annual_inc[loan_data_df.annual_inc &lt; loan_data_df.annual_inc.quantile(0.98)])\n\n\nprint(\"[Annual Income] Rows &lt;99%%ile(%.2f): %d\" % (loan_data_df.annual_inc.quantile(0.98), (loan_data_df.annual_inc &lt; loan_data_df.annual_inc.quantile(0.98)).sum()))\nprint(\"[Annual Income] Rows &lt; 2M$: %d\" % ((loan_data_df.annual_inc &lt; 2000000).sum()))\n\nplt.subplot(2, 2, 3)\nplt.subplot(2, 2, 3).set_title('Loan Amount - Box plot')\nplt.boxplot(loan_data_df.loan_amnt)\n\nplt.subplot(2, 2, 4)\nplt.subplot(2, 2, 4).set_title('Loan Amount - Histogram')\nplt.hist(loan_data_df.loan_amnt, rwidth=0.8)\n\nprint(\"[Loan Amount] Rows &lt;98%%ile(%.2f): %d\" % (loan_data_df.loan_amnt.quantile(0.98), (loan_data_df.loan_amnt &lt; loan_data_df.loan_amnt.quantile(0.98)).sum()))\n\nprint(\"LoanAmount &lt; 98%%ile and Annual income &lt; 98%%ile: num of rows: %d\" % (loan_data_df[(loan_data_df.loan_amnt &lt; loan_data_df.loan_amnt.quantile(0.98)) &\n                                                                                        (loan_data_df.annual_inc &lt; loan_data_df.annual_inc.quantile(0.98))].shape[0]))\nprint(f\" total rows: {loan_data_df.shape[0]}\")\n\nplt.show()\n\n[Annual Income] Rows &lt;99%ile(189000.00): 37075\n[Annual Income] Rows &lt; 2M$: 37833\n[Loan Amount] Rows &lt;98%ile(32000.00): 37067\nLoanAmount &lt; 98%ile and Annual income &lt; 98%ile: num of rows: 36409\n total rows: 37835\n\n\n\n\n\nThere is a clear gap in annual income for entries above 2M\\$ with just two entries at 4M\\$ and 6M\\$ respectively. We can ignore those After removing rows that have outliers from above, we get below:\n\nloan_data_df = loan_data_df[loan_data_df.annual_inc &lt; 2000000]"
  },
  {
    "objectID": "Pawan_Mani_Teja_Kuppili.html#analyze-columns-of-interest",
    "href": "Pawan_Mani_Teja_Kuppili.html#analyze-columns-of-interest",
    "title": "EDA on Lending Club dataset",
    "section": "Analyze columns of interest",
    "text": "Analyze columns of interest\n\nFind relation between all money columns\n\nc = loan_data_df[['loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'installment', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', \n                  'out_prncp', 'out_prncp_inv', \n                  'total_rec_late_fee', \n                  'last_pymnt_amnt', \n                  'recoveries', 'collection_recovery_fee']].corr()\nplt.title(\"Correlation of all amounts type columns\")\nsns.heatmap(c, annot=True, fmt=\".1f\")\nplt.show()\n\n\n\n\n\nIgnoring Investor specific and recovery data columns\nSince lending club is an investor backed P2P lending service, we can ignore the columns like funded_amnt, funded_amnt_inv, total_pymnt_inv, out_prncp_inv.\nAlso we will focus on loan related amounts rather than late / recovery details are only related to each other.\n\nc = loan_data_df[['loan_amnt',  'installment', 'total_pymnt',  'total_rec_prncp', 'total_rec_int', 'annual_inc',\n                  'out_prncp',\n                   \n                  'last_pymnt_amnt']].corr()\nplt.title(\"Correlation of all amounts type columns\")\nsns.heatmap(c, annot=True, fmt=\".1f\")\nplt.show()\n\n\n\n\nFrom the above graph, we see these group of columns highly correlated:  G1: ‘loan_amnt’, ‘funded_amnt’, ‘funded_amnt_inv’, ‘installment’, ‘total_pymnt’, ‘total_pymnt_inv’, ‘total_rec_prncp’, ‘total_rec_int’  G2: ‘out_prncp’, ‘out_prncp_inv’  G3: ‘recoveries’, ‘collection_recovery_fee’  rest are not that related to each other.\nNote : On the contrary of conventional idea, the Annual income and loan amount are very weakly related.\n\n# plot of default ratio to the total loans given per state. \n\nloan_data_df.groupby(['addr_state']).agg(default_ratio=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.box()\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n\nDistribution of loans per state\n\nax = loan_data_df.groupby(['addr_state']).agg(\n                                         # avg_income=('annual_inc', 'mean'), \n                                         # num_of_loans=('id', 'count'), \n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                         current=('loan_status', lambda x: (x=='Current').sum()),\n                                        ).plot.bar(stacked=True, xlabel='State', ylabel='Num of loans', figsize=(15, 8))\n\nloan_data_df.groupby(['addr_state']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r', rot=45)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nSummary\n75 percentile of states are having default rate of around 0.15, so combining both visualizations, following states could be explored for more segmentation, * FL * HI * NV * TN * SD\nto understand what’s causing the defaults at higher rate.\n– Include in insight\n\n\n\nDistribution of Average loan amount and Annual Income\n\nax = loan_data_df.groupby(['addr_state']).agg(\n                                         avg_income=('annual_inc', 'mean'),\n                                         avg_loan=('loan_amnt', 'mean'),\n                                        ).plot.line( xlabel='State', ylabel='Amount', figsize=(15, 8))\n\n\n\n\n\n\nDistribution of types of loan_statuses on different params\n\nax = loan_data_df.groupby(['loan_amnt_range']).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                         current=('loan_status', lambda x: (x=='Current').sum()),\n                                        ).plot.bar(stacked=True, xlabel='loan amount', ylabel='num of loans', figsize=(10, 8))\nloan_data_df.groupby(['loan_amnt_range']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r')\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nax = loan_data_df.groupby(['annual_inc_range']).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                         current=('loan_status', lambda x: (x=='Current').sum()),\n                                        ).plot.bar(stacked=True, xlabel='annual income', ylabel='num of loans', figsize=(10, 8))\n\nloan_data_df.groupby(['annual_inc_range']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r')\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nax = loan_data_df.groupby(['verification_status']).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                         current=('loan_status', lambda x: (x=='Current').sum()),\n                                        ).plot.bar(stacked=True, xlabel='verification status', ylabel='num of loans', figsize=(10, 8))\nloan_data_df.groupby(['verification_status']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r')\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nSummary\nVerified status does not have much impact on the probability of default. We need to dig deeper to confirm this fact / bias.\n\nax = loan_data_df[loan_data_df.loan_status=='Charged Off'].groupby(['loan_amnt_range']).agg(\n                                         not_verified=('verification_status', lambda x: (x=='Not Verified').sum()),\n                                         source_verified=('verification_status', lambda x: (x=='Source Verified').sum()),\n                                         verified=('verification_status', lambda x: (x=='Verified').sum()),\n                                        ).plot.bar(stacked=False, xlabel='Loan Amount Range', ylabel='Num of Loans', figsize=(10, 8))\n#loan_data_df.groupby(['verification_status']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r')\n\n\n\n\n\nax = loan_data_df[loan_data_df.loan_status=='Charged Off'].groupby(['annual_inc_range']).agg(\n                                         not_verified=('verification_status', lambda x: (x=='Not Verified').sum()),\n                                         source_verified=('verification_status', lambda x: (x=='Source Verified').sum()),\n                                         verified=('verification_status', lambda x: (x=='Verified').sum()),\n                                        ).plot.bar(stacked=False, xlabel='Annual Income Range', ylabel='Num of Loans', figsize=(10, 8))\n# loan_data_df.groupby(['annual_inc_range']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r')\n\n\n\n\n\nax = loan_data_df.groupby(['purpose']).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                         current=('loan_status', lambda x: (x=='Current').sum()),\n                                        ).plot.bar(stacked=True, xlabel='purpose of loan', ylabel='num of loans', figsize=(15, 6))\n\nloan_data_df.groupby(['purpose']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r', rot=45)\nplt.show()\n\n\n\n\n\nax = loan_data_df.groupby(['delinq_2yrs']).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                         # current=('loan_status', lambda x: (x=='Current').sum()),\n                                        ).plot.bar(stacked=False, xlabel='delinq in 2yrs', ylabel='num of loans', logy=True, figsize=(10, 8))\n\nloan_data_df.groupby(['delinq_2yrs']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r')\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\nSummary\nIn the current dataset, the measure : delinquency in last 2 years is not a very useful information because even for zero deliquant borrowers, there 10% of loans are charged off.\nYes when the no. of delinquency instances increase, the ratio does got up but the number of loans are so less, we can not conclude accurately.\nIt seems that Lending club is already considering this measure while approving the loans and hardly 2% to 3% of total loans are given when there is one of more delinquency instances.\n\n# 'installment_to_month_inc'\nax = loan_data_df.groupby(['open_to_total_acc']).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                         # current=('loan_status', lambda x: (x=='Current').sum()),\n                                        ).plot.bar(stacked=True, xlabel='ratio of open to total accounts', ylabel='num of loans', figsize=(10, 8))\nloan_data_df.groupby(['open_to_total_acc']).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r')\nplt.show()\n\n\n\n\n\nax = loan_data_df.groupby(['installment_to_month_inc']).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                        ).plot.bar(stacked=True, xlabel='installment to monthly income ratio', ylabel='num of loans', figsize=(10, 8))\n\nloan_data_df.groupby(['installment_to_month_inc']).agg(\n    default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r', rot=45)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nloan_data_df.groupby(['annual_inc_range','verification_status']).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                        ).plot.bar(xlabel='installment to monthly income ratio', ylabel='num of loans')\n\n\nloan_data_df.groupby(['annual_inc_range', 'verification_status']).agg(\n    default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax, color='r', rot=45)\nplt.show()\n\nc = pd.pivot_table(loan_data_df, index='annual_inc_range', columns='verification_status', values='loan_status', aggfunc=lambda x: (x=='Charged Off').sum() / x.count())\nplt.title('Default rates for Loan amounts vs Verification status')\nsns.heatmap(c, annot=True, fmt=\".2f\")\nplt.show()\n\n\n\n\n\n\n\n\nprint(pd.pivot_table(loan_data_df[loan_data_df['loan_status'] == 'Charged Off'], index=['annual_inc_range', 'loan_amnt_range'], columns='verification_status', values='loan_status_n', aggfunc='count'))\nc = pd.pivot_table(loan_data_df, index='loan_amnt_range', columns='verification_status', values='loan_status', aggfunc=lambda x: (x=='Charged Off').sum() / x.count())\nsns.heatmap(c, annot=True, fmt=\".2f\")\n\nverification_status               Not Verified  Source Verified  Verified\nannual_inc_range loan_amnt_range                                         \nbelow 10k        below 1k                    2                1         0\n                 1k-5k                       8                2         2\n                 5k-10k                      0                0         0\n                 10k-25k                     0                0         0\n                 25k+                        0                0         0\n10k-50k          below 1k                   14                6         4\n                 1k-5k                     387              246       107\n                 5k-10k                    417              235       180\n                 10k-25k                   207              201       316\n                 25k+                        0                1         7\n50k-100k         below 1k                    2                1         0\n                 1k-5k                     177              100        54\n                 5k-10k                    266              158       162\n                 10k-25k                   285              262       629\n                 25k+                        1               26       167\n100k-500k        below 1k                    0                0         0\n                 1k-5k                      18                8        16\n                 5k-10k                     38               29        34\n                 10k-25k                    65               76       165\n                 25k+                        0               25        86\n500k-1M          below 1k                    0                0         0\n                 1k-5k                       0                1         0\n                 5k-10k                      2                0         0\n                 10k-25k                     2                2         1\n                 25k+                        0                0         1\n1M+              below 1k                    0                0         0\n                 1k-5k                       0                0         0\n                 5k-10k                      0                0         0\n                 10k-25k                     0                0         1\n                 25k+                        0                0         0\n\n\n&lt;Axes: xlabel='verification_status', ylabel='loan_amnt_range'&gt;\n\n\n\n\n\n\n# Taking a loan with more than 30% of annual inc makes the probability of charge off higher.\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(15,7))\nc = pd.pivot_table(loan_data_df[loan_data_df.term == 36], index='annual_inc_range', columns='loan_amnt_range', values='loan_status', aggfunc=lambda x: (x=='Charged Off').sum() / x.count())\nsns.heatmap(c, annot=True, fmt=\".2f\", ax=ax1)\nax1.set_title('Annual income to loan amount showing default rates for 36m term ')\n\nc = pd.pivot_table(loan_data_df[loan_data_df.term == 60], index='annual_inc_range', columns='loan_amnt_range', values='loan_status', aggfunc=lambda x: (x=='Charged Off').sum() / x.count())\nsns.heatmap(c, annot=True, fmt=\".2f\", ax=ax2)\nax2.set_title('Annual income to loan amount showing default rates for 60m term')\nplt.show()\n\n\n\n\n\n# higher loan term makes the probability of charge off higher for larger loan amounts\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(15,7))\npd.pivot_table(loan_data_df, index='loan_amnt_range', columns='term', values='loan_status', aggfunc=lambda x: (x=='Charged Off').sum() / x.count()).plot.line(ax=ax1, ylabel='Default rate')\n\npd.pivot_table(loan_data_df, index='annual_inc_range', columns='term', values='loan_status', aggfunc=lambda x: (x=='Charged Off').sum() / x.count()).plot.line(ax=ax2, ylabel='Default rate')\n\n&lt;Axes: xlabel='annual_inc_range', ylabel='Default rate'&gt;\n\n\n\n\n\n\n\nSummary\nThe loan term has a positive correlation with “charged off” probability.\nHigher the tenure and higher the loan amount, are positvely correlated with the probability of charged off.\nand higher tenure (i.e. 60 months) would always higher probablity of charged off compared to lower tenure (i.e. 36 months) regardless of the loan amount.\nIn general higher tenure loans recover high portion of interest in initial 50% of time and that may be the reason.\n– Insight\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(12,6))\n\ndefaulted_loans = loan_data_df[loan_data_df.loan_status == 'Charged Off']\npd.cut(defaulted_loans[defaulted_loans.term==36].total_rec_prncp / defaulted_loans[defaulted_loans.term==36].loan_amnt , bins=np.linspace(0,1,7)).value_counts(sort=False).plot.line(rot=45, ax=ax1, xlabel='fraction of loan repaid', ylabel='num of defaulted loans')\nax1.set_title('Fraction repaid vs num of defaulted loans (loan term=36)')\n\npd.cut(defaulted_loans.total_rec_prncp[defaulted_loans.term==60] / defaulted_loans[defaulted_loans.term==60].loan_amnt , bins=np.linspace(0,1,7)).value_counts(sort=False).plot.line(rot=45, ax=ax2, xlabel='fraction of loan repaid', ylabel='num of defaulted loans')\nax2.set_title('Fraction repaid vs num of defaulted loans (loan term=60)')\n\n# defaulted_loans[['total_pymnt', 'total_rec_prncp', 'out_prncp']]\n\nText(0.5, 1.0, 'Fraction repaid vs num of defaulted loans (loan term=60)')\n\n\n\n\n\n\n\nSummary\nThe probablity of charged off is inversely correlated to the principal received.\n– insight\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(20,8))\nloan_data_df[loan_data_df.earliest_cr_line.dt.year&gt;1980].groupby(loan_data_df.earliest_cr_line.dt.year).agg(\n                                         charge_off=('loan_status', lambda x: (x=='Charged Off').sum()),\n                                         fully_paid=('loan_status', lambda x: (x=='Fully Paid').sum()),\n                                         current=('loan_status', lambda x: (x=='Current').sum()),\n                                        ).plot.bar(stacked=True, ylabel='num of loans', ax=ax1)\n\nloan_data_df[loan_data_df.earliest_cr_line.dt.year&gt;1980].groupby(loan_data_df.earliest_cr_line.dt.year).agg(default_rate=('loan_status', lambda x: (x=='Charged Off').sum() / x.count())).plot.line(secondary_y='default_rate', ax=ax2, color='r', rot=90)\nplt.show()\n\n\n\n\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(20,8))\n\ndefaulted_loans = loan_data_df[loan_data_df.loan_status == 'Charged Off']\npd.cut(defaulted_loans.dti, bins=np.linspace(0,33,7)).value_counts(sort=False).plot.line(rot=45, xlabel='dti', ylabel='num of defaulted loans', ax=ax1)\nax1.set_title('DTI vs num of defaulted loans')\n\ndefaulted_loans.installment_to_month_inc.value_counts(sort=False).plot.line(rot=45, xlabel='installment_to_month_inc', ylabel='num of defaulted loans', ax=ax2)\nax2.set_title('installment/montly_income vs num of defaulted loans')\n\nText(0.5, 1.0, 'installment/montly_income vs num of defaulted loans')\n\n\n\n\n\n\ndefaulted_loans = loan_data_df[loan_data_df.loan_status == 'Charged Off']\npd.cut(defaulted_loans.revol_util, bins=np.linspace(0,1,11)).value_counts(sort=False).plot.line(rot=45, xlabel='utilization of credit available', ylabel='num of defaulted loans')\nplt.title('utilization of credit available vs num of defaulted loans')\nplt.show()"
  },
  {
    "objectID": "scratch/CaseStudy_Loans_EDA_Jatan.html",
    "href": "scratch/CaseStudy_Loans_EDA_Jatan.html",
    "title": "Load and inspect data",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport matplotlib.pyplot as plt\nimport re\n\n\npd.options.display.max_colwidth = 200\n\n\nloan_data_df = pd.read_csv('../loan.csv', low_memory=False)\ncolumn_desc_df = pd.read_excel('../Data_Dictionary.xlsx')\nloan_data_df.info()\nbefore_cols = len(loan_data_df.columns)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 39717 entries, 0 to 39716\nColumns: 111 entries, id to total_il_high_credit_limit\ndtypes: float64(74), int64(13), object(24)\nmemory usage: 33.6+ MB\n\n\n\nFinding Columns having all Null or 90% Null data\n\nColumns having all Null\n\nall_empty_cols= loan_data_df.columns[loan_data_df.isna().all()].tolist()\nprint(f\"Total number of all empty columns are : {len(all_empty_cols)}\\n\")\nprint(all_empty_cols)\n\nTotal number of all empty columns are : 54\n\n['mths_since_last_major_derog', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_il_6m', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc', 'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m', 'acc_open_past_24mths', 'avg_cur_bal', 'bc_open_to_buy', 'bc_util', 'mo_sin_old_il_acct', 'mo_sin_old_rev_tl_op', 'mo_sin_rcnt_rev_tl_op', 'mo_sin_rcnt_tl', 'mort_acc', 'mths_since_recent_bc', 'mths_since_recent_bc_dlq', 'mths_since_recent_inq', 'mths_since_recent_revol_delinq', 'num_accts_ever_120_pd', 'num_actv_bc_tl', 'num_actv_rev_tl', 'num_bc_sats', 'num_bc_tl', 'num_il_tl', 'num_op_rev_tl', 'num_rev_accts', 'num_rev_tl_bal_gt_0', 'num_sats', 'num_tl_120dpd_2m', 'num_tl_30dpd', 'num_tl_90g_dpd_24m', 'num_tl_op_past_12m', 'pct_tl_nvr_dlq', 'percent_bc_gt_75', 'tot_hi_cred_lim', 'total_bal_ex_mort', 'total_bc_limit', 'total_il_high_credit_limit']\n\n\n#### All Columns having 90% or more Null data\nNote: Following list will be the superset of previous list.\n\natleast_90pct_empty = loan_data_df.columns[~(loan_data_df.isnull().sum(axis=0) &lt;= loan_data_df.shape[0] * 0.9)].tolist()\nprint(f\"Columns with atleast 90% of empty columns are : {len(atleast_90pct_empty)}\\n\")\nprint(atleast_90pct_empty)\n\nColumns with atleast 90% of empty columns are : 56\n\n['mths_since_last_record', 'next_pymnt_d', 'mths_since_last_major_derog', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_il_6m', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc', 'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m', 'acc_open_past_24mths', 'avg_cur_bal', 'bc_open_to_buy', 'bc_util', 'mo_sin_old_il_acct', 'mo_sin_old_rev_tl_op', 'mo_sin_rcnt_rev_tl_op', 'mo_sin_rcnt_tl', 'mort_acc', 'mths_since_recent_bc', 'mths_since_recent_bc_dlq', 'mths_since_recent_inq', 'mths_since_recent_revol_delinq', 'num_accts_ever_120_pd', 'num_actv_bc_tl', 'num_actv_rev_tl', 'num_bc_sats', 'num_bc_tl', 'num_il_tl', 'num_op_rev_tl', 'num_rev_accts', 'num_rev_tl_bal_gt_0', 'num_sats', 'num_tl_120dpd_2m', 'num_tl_30dpd', 'num_tl_90g_dpd_24m', 'num_tl_op_past_12m', 'pct_tl_nvr_dlq', 'percent_bc_gt_75', 'tot_hi_cred_lim', 'total_bal_ex_mort', 'total_bc_limit', 'total_il_high_credit_limit']\n\n\n\n\n\nData Clean up\n\nDelete all / 90% empty columns\n\n# Remove all columns with null values\nloan_data_df = loan_data_df.dropna(axis=1, how='all')\n# Remove all columns with 90% null values\nloan_data_df = loan_data_df.loc[:, (loan_data_df.isnull().sum(axis=0) &lt;= loan_data_df.shape[0] * 0.9)]\n\n\n\nRemove columns which have constant as a value.\nThese will become metadata for the dataset because the dataset has only one value for them. eg. all values in column: pymnt_plan are n.\n\nconstant_cols_dict = { c : loan_data_df[c].value_counts().index[0] for c in loan_data_df.columns if loan_data_df[c].value_counts().count() == 1} \n\nprint(f\"Columns having constant values: {constant_cols_dict}\\n\")\n\nprint(f\"Columns to be removed : {constant_cols_dict.keys()}\\n\")\n\nloan_data_df.drop(columns=constant_cols_dict.keys(), inplace=True) \n\nColumns having constant values: {'pymnt_plan': 'n', 'initial_list_status': 'f', 'collections_12_mths_ex_med': 0.0, 'policy_code': 1, 'application_type': 'INDIVIDUAL', 'acc_now_delinq': 0, 'chargeoff_within_12_mths': 0.0, 'delinq_amnt': 0, 'tax_liens': 0.0}\n\nColumns to be removed : dict_keys(['pymnt_plan', 'initial_list_status', 'collections_12_mths_ex_med', 'policy_code', 'application_type', 'acc_now_delinq', 'chargeoff_within_12_mths', 'delinq_amnt', 'tax_liens'])\n\n\n\n\n\nDataset after removed columns\n\nprint(f\"The no. columns are reduced from {before_cols} to {len(loan_data_df.columns)}\")\n\nThe no. columns are reduced from 111 to 46\n\n\n\nloan_data_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 39717 entries, 0 to 39716\nData columns (total 46 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   id                       39717 non-null  int64  \n 1   member_id                39717 non-null  int64  \n 2   loan_amnt                39717 non-null  int64  \n 3   funded_amnt              39717 non-null  int64  \n 4   funded_amnt_inv          39717 non-null  float64\n 5   term                     39717 non-null  object \n 6   int_rate                 39717 non-null  object \n 7   installment              39717 non-null  float64\n 8   grade                    39717 non-null  object \n 9   sub_grade                39717 non-null  object \n 10  emp_title                37258 non-null  object \n 11  emp_length               38642 non-null  object \n 12  home_ownership           39717 non-null  object \n 13  annual_inc               39717 non-null  float64\n 14  verification_status      39717 non-null  object \n 15  issue_d                  39717 non-null  object \n 16  loan_status              39717 non-null  object \n 17  url                      39717 non-null  object \n 18  desc                     26777 non-null  object \n 19  purpose                  39717 non-null  object \n 20  title                    39706 non-null  object \n 21  zip_code                 39717 non-null  object \n 22  addr_state               39717 non-null  object \n 23  dti                      39717 non-null  float64\n 24  delinq_2yrs              39717 non-null  int64  \n 25  earliest_cr_line         39717 non-null  object \n 26  inq_last_6mths           39717 non-null  int64  \n 27  mths_since_last_delinq   14035 non-null  float64\n 28  open_acc                 39717 non-null  int64  \n 29  pub_rec                  39717 non-null  int64  \n 30  revol_bal                39717 non-null  int64  \n 31  revol_util               39667 non-null  object \n 32  total_acc                39717 non-null  int64  \n 33  out_prncp                39717 non-null  float64\n 34  out_prncp_inv            39717 non-null  float64\n 35  total_pymnt              39717 non-null  float64\n 36  total_pymnt_inv          39717 non-null  float64\n 37  total_rec_prncp          39717 non-null  float64\n 38  total_rec_int            39717 non-null  float64\n 39  total_rec_late_fee       39717 non-null  float64\n 40  recoveries               39717 non-null  float64\n 41  collection_recovery_fee  39717 non-null  float64\n 42  last_pymnt_d             39646 non-null  object \n 43  last_pymnt_amnt          39717 non-null  float64\n 44  last_credit_pull_d       39715 non-null  object \n 45  pub_rec_bankruptcies     39020 non-null  float64\ndtypes: float64(16), int64(10), object(20)\nmemory usage: 13.9+ MB\n\n\n\nloan_data_df.head(5)\n\n\n\n\n\n\n\n\nid\nmember_id\nloan_amnt\nfunded_amnt\nfunded_amnt_inv\nterm\nint_rate\ninstallment\ngrade\nsub_grade\n...\ntotal_pymnt_inv\ntotal_rec_prncp\ntotal_rec_int\ntotal_rec_late_fee\nrecoveries\ncollection_recovery_fee\nlast_pymnt_d\nlast_pymnt_amnt\nlast_credit_pull_d\npub_rec_bankruptcies\n\n\n\n\n0\n1077501\n1296599\n5000\n5000\n4975.0\n36 months\n10.65%\n162.87\nB\nB2\n...\n5833.84\n5000.00\n863.16\n0.00\n0.00\n0.00\nJan-15\n171.62\nMay-16\n0.0\n\n\n1\n1077430\n1314167\n2500\n2500\n2500.0\n60 months\n15.27%\n59.83\nC\nC4\n...\n1008.71\n456.46\n435.17\n0.00\n117.08\n1.11\nApr-13\n119.66\nSep-13\n0.0\n\n\n2\n1077175\n1313524\n2400\n2400\n2400.0\n36 months\n15.96%\n84.33\nC\nC5\n...\n3005.67\n2400.00\n605.67\n0.00\n0.00\n0.00\nJun-14\n649.91\nMay-16\n0.0\n\n\n3\n1076863\n1277178\n10000\n10000\n10000.0\n36 months\n13.49%\n339.31\nC\nC1\n...\n12231.89\n10000.00\n2214.92\n16.97\n0.00\n0.00\nJan-15\n357.48\nApr-16\n0.0\n\n\n4\n1075358\n1311748\n3000\n3000\n3000.0\n60 months\n12.69%\n67.79\nB\nB5\n...\n3513.33\n2475.94\n1037.39\n0.00\n0.00\n0.00\nMay-16\n67.79\nMay-16\n0.0\n\n\n\n\n5 rows × 46 columns\n\n\n\n\n\nConvert the columns to correct datatypes\n\ndef convert_emp_length(l):\n    if pd.isna(l):\n        return np.nan\n    elif l == '&lt; 1 year':\n        return 0\n    elif l == '10+ years':\n        return 10\n    else:\n        return int(str(l)[0])\n\n\nloan_data_df.term       = loan_data_df.term.apply(lambda x: int(str(x)[:3]))\nloan_data_df.int_rate   = loan_data_df.int_rate.apply(lambda x: float(str(x)[:-1])/100)\nloan_data_df.emp_length = loan_data_df.emp_length.apply(convert_emp_length) \nloan_data_df.issue_d    = pd.to_datetime(loan_data_df.issue_d, format='%b-%y')\n\n\nloan_data_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 39717 entries, 0 to 39716\nData columns (total 46 columns):\n #   Column                   Non-Null Count  Dtype         \n---  ------                   --------------  -----         \n 0   id                       39717 non-null  int64         \n 1   member_id                39717 non-null  int64         \n 2   loan_amnt                39717 non-null  int64         \n 3   funded_amnt              39717 non-null  int64         \n 4   funded_amnt_inv          39717 non-null  float64       \n 5   term                     39717 non-null  int64         \n 6   int_rate                 39717 non-null  float64       \n 7   installment              39717 non-null  float64       \n 8   grade                    39717 non-null  object        \n 9   sub_grade                39717 non-null  object        \n 10  emp_title                37258 non-null  object        \n 11  emp_length               38642 non-null  float64       \n 12  home_ownership           39717 non-null  object        \n 13  annual_inc               39717 non-null  float64       \n 14  verification_status      39717 non-null  object        \n 15  issue_d                  39717 non-null  datetime64[ns]\n 16  loan_status              39717 non-null  object        \n 17  url                      39717 non-null  object        \n 18  desc                     26777 non-null  object        \n 19  purpose                  39717 non-null  object        \n 20  title                    39706 non-null  object        \n 21  zip_code                 39717 non-null  object        \n 22  addr_state               39717 non-null  object        \n 23  dti                      39717 non-null  float64       \n 24  delinq_2yrs              39717 non-null  int64         \n 25  earliest_cr_line         39717 non-null  object        \n 26  inq_last_6mths           39717 non-null  int64         \n 27  mths_since_last_delinq   14035 non-null  float64       \n 28  open_acc                 39717 non-null  int64         \n 29  pub_rec                  39717 non-null  int64         \n 30  revol_bal                39717 non-null  int64         \n 31  revol_util               39667 non-null  object        \n 32  total_acc                39717 non-null  int64         \n 33  out_prncp                39717 non-null  float64       \n 34  out_prncp_inv            39717 non-null  float64       \n 35  total_pymnt              39717 non-null  float64       \n 36  total_pymnt_inv          39717 non-null  float64       \n 37  total_rec_prncp          39717 non-null  float64       \n 38  total_rec_int            39717 non-null  float64       \n 39  total_rec_late_fee       39717 non-null  float64       \n 40  recoveries               39717 non-null  float64       \n 41  collection_recovery_fee  39717 non-null  float64       \n 42  last_pymnt_d             39646 non-null  object        \n 43  last_pymnt_amnt          39717 non-null  float64       \n 44  last_credit_pull_d       39715 non-null  object        \n 45  pub_rec_bankruptcies     39020 non-null  float64       \ndtypes: datetime64[ns](1), float64(18), int64(11), object(16)\nmemory usage: 13.9+ MB\n\n\n\n\n\nFiltered Data definition as per the data columns\n\ncolumn_desc_df = column_desc_df[column_desc_df.LoanStatNew.isin(loan_data_df.columns)]\ncolumn_desc_df.reset_index(inplace=True)\ncolumn_desc_df.loc[:, ['LoanStatNew', 'Description']]\n\n\n\n\n\n\n\n\nLoanStatNew\nDescription\n\n\n\n\n0\naddr_state\nThe state provided by the borrower in the loan application\n\n\n1\nannual_inc\nThe self-reported annual income provided by the borrower during registration.\n\n\n2\ncollection_recovery_fee\npost charge off collection fee\n\n\n3\ndelinq_2yrs\nThe number of 30+ days past-due incidences of delinquency in the borrower's credit file for the past 2 years\n\n\n4\ndesc\nLoan description provided by the borrower\n\n\n5\ndti\nA ratio calculated using the borrower’s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower’s self-reported monthly inc...\n\n\n6\nearliest_cr_line\nThe month the borrower's earliest reported credit line was opened\n\n\n7\nemp_length\nEmployment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.\n\n\n8\nemp_title\nThe job title supplied by the Borrower when applying for the loan.*\n\n\n9\nfunded_amnt\nThe total amount committed to that loan at that point in time.\n\n\n10\nfunded_amnt_inv\nThe total amount committed by investors for that loan at that point in time.\n\n\n11\ngrade\nLC assigned loan grade\n\n\n12\nhome_ownership\nThe home ownership status provided by the borrower during registration. Our values are: RENT, OWN, MORTGAGE, OTHER.\n\n\n13\nid\nA unique LC assigned ID for the loan listing.\n\n\n14\ninq_last_6mths\nThe number of inquiries in past 6 months (excluding auto and mortgage inquiries)\n\n\n15\ninstallment\nThe monthly payment owed by the borrower if the loan originates.\n\n\n16\nint_rate\nInterest Rate on the loan\n\n\n17\nissue_d\nThe month which the loan was funded\n\n\n18\nlast_credit_pull_d\nThe most recent month LC pulled credit for this loan\n\n\n19\nlast_pymnt_amnt\nLast total payment amount received\n\n\n20\nlast_pymnt_d\nLast month payment was received\n\n\n21\nloan_amnt\nThe listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.\n\n\n22\nloan_status\nCurrent status of the loan\n\n\n23\nmember_id\nA unique LC assigned Id for the borrower member.\n\n\n24\nmths_since_last_delinq\nThe number of months since the borrower's last delinquency.\n\n\n25\nopen_acc\nThe number of open credit lines in the borrower's credit file.\n\n\n26\nout_prncp\nRemaining outstanding principal for total amount funded\n\n\n27\nout_prncp_inv\nRemaining outstanding principal for portion of total amount funded by investors\n\n\n28\npub_rec\nNumber of derogatory public records\n\n\n29\npub_rec_bankruptcies\nNumber of public record bankruptcies\n\n\n30\npurpose\nA category provided by the borrower for the loan request.\n\n\n31\nrecoveries\npost charge off gross recovery\n\n\n32\nrevol_bal\nTotal credit revolving balance\n\n\n33\nrevol_util\nRevolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.\n\n\n34\nsub_grade\nLC assigned loan subgrade\n\n\n35\nterm\nThe number of payments on the loan. Values are in months and can be either 36 or 60.\n\n\n36\ntitle\nThe loan title provided by the borrower\n\n\n37\ntotal_acc\nThe total number of credit lines currently in the borrower's credit file\n\n\n38\ntotal_pymnt\nPayments received to date for total amount funded\n\n\n39\ntotal_pymnt_inv\nPayments received to date for portion of total amount funded by investors\n\n\n40\ntotal_rec_int\nInterest received to date\n\n\n41\ntotal_rec_late_fee\nLate fees received to date\n\n\n42\ntotal_rec_prncp\nPrincipal received to date\n\n\n43\nurl\nURL for the LC page with listing data.\n\n\n44\nverification_status\nIndicates if income was verified by LC, not verified, or if the income source was verified\n\n\n45\nzip_code\nThe first 3 numbers of the zip code provided by the borrower in the loan application."
  }
]